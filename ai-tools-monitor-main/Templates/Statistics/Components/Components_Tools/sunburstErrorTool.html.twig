<div id="sunburstTool" class="text-center"></div>

<script>
    let data_sunburstTool = {{ data|json_encode|raw }};

    function transformData(data) {
        const root = {
            name: "Erreurs",
            children: []
        };

        const toolsMap = {};

        data.forEach(log => {
            const {
                id_tool,
                name_tool,
                id_language,
                name_language,
                id_level,
                name_level,
                id_error_type,
                name_error_type,
                source_error
            } = log;

            if (!toolsMap[id_tool]) {
                toolsMap[id_tool] = {
                    name: name_tool,
                    children: {}
                };
            }

            const tool = toolsMap[id_tool];

            if (!tool.children[id_language]) {
                tool.children[id_language] = {
                    name: name_language,
                    children: {}
                };
            }

            const language = tool.children[id_language];

            if (!language.children[id_level]) {
                language.children[id_level] = {
                    name: name_level,
                    children: {
                        "API OnlineFormaPro": {name: "API OnlineFormaPro", children: {}},
                        "API OpenIA": {name: "API OpenIA", children: {}},
                        "Autres": {name: "Autres", children: {}}
                    }
                };
            }

            const lvl = language.children[id_level];
            let source;

            if ([1, 2, 3].includes(id_error_type)) {
                source = lvl.children["API OnlineFormaPro"];
            } else if ([4, 5].includes(id_error_type)) {
                source = lvl.children["API OpenIA"];
            } else {
                source = lvl.children["Autres"];
            }

            if (!source.children[id_error_type]) {
                source.children[id_error_type] = {
                    name: name_error_type,
                    value: 0
                };
            }

            const error = source.children[id_error_type];
            error.value += 1;
        });

        Object.keys(toolsMap).forEach(toolId => {
            const tool = toolsMap[toolId];
            const languages = [];

            Object.keys(tool.children).forEach(languageId => {
                const language = tool.children[languageId];
                const levels = [];

                Object.keys(language.children).forEach(levelId => {
                    const level = language.children[levelId];
                    const sources = [];

                    Object.keys(level.children).forEach(sourceName => {
                        const source = level.children[sourceName];
                        const errors = [];

                        Object.keys(source.children).forEach(errorTypeId => {
                            const error = source.children[errorTypeId];
                            errors.push(error);
                        });

                        sources.push({
                            name: source.name,
                            children: errors
                        });
                    });

                    levels.push({
                        name: level.name,
                        children: sources
                    });
                });

                languages.push({
                    name: language.name,
                    children: levels
                });
            });

            root.children.push({
                name: tool.name,
                children: languages
            });
        });

        return root;
    }

    data_sunburstTool = transformData(data_sunburstTool);

    function addSunBurstZoomable() {
        let data = data_sunburstTool;

        const width = 928;
        const height = 600;
        const radius = height / 6;

        const toolColor = d3.scaleOrdinal(d3.schemeCategory10);
        const languageColor = d3.scaleOrdinal(d3.schemeCategory10);
        const levelColor = d3.scaleOrdinal(d3.schemeCategory10);
        const sourceColor = d3.scaleOrdinal(d3.schemeCategory10);
        const typeColor = d3.scaleOrdinal(d3.schemeCategory10);

        const hierarchy = d3.hierarchy(data)
            .sum(d => d.value)
            .sort((a, b) => b.value - a.value);

        const root = d3.partition()
            .size([2 * Math.PI, hierarchy.height + 1])
            (hierarchy);
        root.each(d => d.current = d);

        const arc = d3.arc()
            .startAngle(d => d.x0)
            .endAngle(d => d.x1)
            .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))
            .padRadius(radius * 1.5)
            .innerRadius(d => d.y0 * radius)
            .outerRadius(d => Math.max(d.y0 * radius, d.y1 * radius - 1));

        const svg = d3.create("svg")
            .attr("viewBox", [-width / 2, -height / 2, width, height])
            .style("font", "10px sans-serif");

        const path = svg.append("g")
            .selectAll("path")
            .data(root.descendants().slice(1))
            .join("path")
            .attr("fill", d => getColor(d))
            .attr("fill-opacity", d => arcVisible(d.current) ? (d.children ? 0.6 : 0.4) : 0)
            .attr("pointer-events", d => arcVisible(d.current) ? "auto" : "none")
            .attr("d", d => arc(d.current));

        path.filter(d => d.children)
            .style("cursor", "pointer")
            .on("click", clicked);

        const format = d3.format(",d");
        path.append("title")
            .text(d => `${d.ancestors().map(d => d.data.name).reverse().join("/")}\n${format(d.value)}`);

        const label = svg.append("g")
            .attr("pointer-events", "none")
            .attr("text-anchor", "middle")
            .style("user-select", "none")
            .selectAll("text")
            .data(root.descendants().slice(1))
            .join("text")
            .attr("dy", "0.35em")
            .attr("fill-opacity", d => +labelVisible(d.current))
            .attr("transform", d => labelTransform(d.current))
            .text(d => d.data.name)
            .each(wrapText);

        const parent = svg.append("circle")
            .datum(root)
            .attr("r", radius)
            .attr("fill", "none")
            .attr("pointer-events", "all")
            .on("click", clicked);

        function clicked(event, p) {
            parent.datum(p.parent || root);

            root.each(d => d.target = {
                x0: Math.max(0, Math.min(1, (d.x0 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,
                x1: Math.max(0, Math.min(1, (d.x1 - p.x0) / (p.x1 - p.x0))) * 2 * Math.PI,
                y0: Math.max(0, d.y0 - p.depth),
                y1: Math.max(0, d.y1 - p.depth)
            });

            const t = svg.transition().duration(750);

            path.transition(t)
                .tween("data", d => {
                    const i = d3.interpolate(d.current, d.target);
                    return t => d.current = i(t);
                })
                .filter(function(d) {
                    return +this.getAttribute("fill-opacity") || arcVisible(d.target);
                })
                .attr("fill-opacity", d => arcVisible(d.target) ? (d.children ? 0.6 : 0.4) : 0)
                .attr("pointer-events", d => arcVisible(d.target) ? "auto" : "none")
                .attrTween("d", d => () => arc(d.current))
                .attr("fill", d => getColor(d));

            label.filter(function(d) {
                return +this.getAttribute("fill-opacity") || labelVisible(d.target);
            }).transition(t)
                .attr("fill-opacity", d => +labelVisible(d.target))
                .attrTween("transform", d => () => labelTransform(d.current))
                .tween("text", function(d) {
                    const self = this;
                    return function() {
                        self.textContent = d.data.name;
                        wrapText.call(self, d);
                    };
                });
        }

        function getColor(d) {
            if (d.depth === 1) {
                return toolColor(d.data.name);
            } else if (d.depth === 2) {
                return languageColor(d.data.name);
            } else if (d.depth === 3) {
                return levelColor(d.data.name);
            } else if (d.depth === 4) {
                return sourceColor(d.data.name);
            } else if (d.depth === 5) {
                return typeColor(d.data.name);
            } else {
                return "#ccc";
            }
        }

        function arcVisible(d) {
            return d.y1 <= 3 && d.y0 >= 1 && d.x1 > d.x0;
        }

        function labelVisible(d) {
            return d.y1 <= 3 && d.y0 >= 1 && (d.y1 - d.y0) * (d.x1 - d.x0) > 0.03;
        }

        function labelTransform(d) {
            const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;
            const y = (d.y0 + d.y1) / 2 * radius;
            return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`;
        }

        function wrapText(d) {
            const self = d3.select(this);
            const words = d.data.name.split(/\s+/).reverse();
            const lineHeight = 1.1;
            const x = 0;
            const y = 0;
            const dy = parseFloat(self.attr("dy"));
            let line = [];
            let lineNumber = 0;
            let tspan = self.text(null).append("tspan").attr("x", x).attr("y", y).attr("dy", `${dy}em`);
            let word;
            while ((word = words.pop())) {
                line.push(word);
                tspan.text(line.join(" "));
                if (tspan.node().getComputedTextLength() > radius / (d.depth + 1)) {
                    line.pop();
                    tspan.text(line.join(" "));
                    line = [word];
                    tspan = self.append("tspan").attr("x", x).attr("y", y).attr("dy", `${++lineNumber * lineHeight + dy}em`).text(word);
                }
            }
        }

        return svg.node();
    }

    document.getElementById("sunburstTool").append(addSunBurstZoomable());
</script>