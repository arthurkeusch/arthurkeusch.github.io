<div id="circlepacking"></div>

<script>
    let data_circlepacking = {};

    let tools_circlepacking = {{ tools|json_encode|raw }};
    let languages_circlepacking = {{ languages|json_encode|raw }};
    let levels_circlepacking = {{ levels|json_encode|raw }};
    let logs_circlepacking = {{ logs|json_encode|raw }};


    /**
     * Transforme les données des outils, langues, niveaux et logs en une structure hiérarchique adaptée pour le circle packing.
     * @param {Array} tools - Les données des outils.
     * @param {Array} languages - Les données des langues.
     * @param {Array} levels - Les données des niveaux.
     * @param {Array} logs - Les données des logs.
     */
    async function transformData(tools, languages, levels, logs) {
        let data = {
            "name": "Outils",
            "children": []
        }
        tools.forEach(tool => {
            data.children.push({
                "name": tool.name_tool,
                "id_tool": tool.id_tool,
                "children": []
            });
        });
        languages.forEach(language => {
            data.children.find(tool => tool.id_tool === language.id_tool).children.push({
                "name": language.name_language,
                "id_language": language.id_language,
                "children": []
            });
        });
        levels.forEach(level => {
            data.children.find(tool => tool.id_tool === level.id_tool).children.forEach(language => {
                language.children.push({
                    "name": level.name_level,
                    "id_level": level.id_level,
                    "children": []
                });
            });
        });
        logs.forEach(log => {
            data.children.forEach(tool => {
                if (tool.children.find(language => language.id_language === log.id_language) !== undefined && tool.children.find(language => language.id_language === log.id_language).children.find(level => level.id_level === log.id_level) !== undefined) {
                    tool.children.find(language => language.id_language === log.id_language).children.find(level => level.id_level === log.id_level).children.push({
                        "name": log.date_log,
                        "id": log.id_log,
                        "value": 1
                    });
                }
            });
        });
        data.children.forEach(tool => {
            tool.children.forEach(languages => {
                languages.children.forEach(level => {
                    if (level.children.length > 5) {
                        const nbDayDiff = getEtenduLog(level.children);
                        let groupedLog = [];
                        if (nbDayDiff !== 0 && nbDayDiff <= 7) {
                            level.children = groupByDay(level);
                        } else if (nbDayDiff <= 61) {
                            level.children = groupByWeek(level);
                        } else if (nbDayDiff <= 365) {
                            level.children = groupByMonth(level);
                        } else if (nbDayDiff > 365) {
                            level.children = groupByYear(level);
                        }
                    }
                });
            });
        });
        data_circlepacking = data;
    }


    /**
     * Groupe les logs par jour en regroupant ceux qui sont de la même journée.
     * @param {Object} level - Le niveau contenant les logs à regrouper.
     * @returns {Array} - Les logs groupés par jour.
     */
    function groupByDay(level) {
        let groupedLog = [];
        let currentDay = parseDateString(level.children[0]['name']);
        let sameDayLogs = [];
        sameDayLogs.push(currentDay);
        level.children.forEach(log => {
            if (isSameDay(currentDay, parseDateString(log.name))) {
                sameDayLogs.push(log);
            } else {
                const date = sameDayLogs.shift();
                sameDayLogs.forEach(log => {
                    log.name = formattedDateHours(parseDateString(log.date));
                });
                groupedLog.push({
                    'name': formattedDateDay(date),
                    'children': sameDayLogs
                });
                sameDayLogs = [];
                sameDayLogs.push(parseDateString(log.name))
                sameDayLogs.push(log);
                currentDay = parseDateString(log.name);
            }
        });
        if (sameDayLogs.length !== 0) {
            const date = sameDayLogs.shift();
            sameDayLogs.forEach(log => {
                log.name = formattedDateHours(parseDateString(log.name));
            });
            groupedLog.push({
                'name': formattedDateDay(date),
                'children': sameDayLogs
            });
        }
        return groupedLog;
    }


    /**
     * Groupe les logs par semaine en regroupant ceux qui sont de la même semaine.
     * @param {Object} level - Le niveau contenant les logs à regrouper.
     * @returns {Array} - Les logs groupés par semaine.
     */
    function groupByWeek(level) {
        let groupedLog = [];
        let currentDay = parseDateString(level.children[0]['name']);
        let sameWeekLog = [];
        sameWeekLog.push(currentDay);
        level.children.forEach(log => {
            let formatedDate = formattedDate(parseDateString(log.name));
            if (isSameWeek(currentDay, parseDateString(log.name))) {
                sameWeekLog.push(log);
            } else {
                currentDay = parseDateString(log.name);
                let date = sameWeekLog.shift();
                sameWeekLog.forEach(log => {
                    log.name = formattedDateDay(parseDateString(log.name));
                    log.date = formatedDate;
                });
                date = getWeekISO(date)
                groupedLog.push({
                    'name': 'Année ' + date.year + '\nsemaine ' + date.week,
                    'children': sameWeekLog
                });
                sameWeekLog = [];
                sameWeekLog.push(currentDay);
                sameWeekLog.push(log);
            }
        });
        if (sameWeekLog.length !== 0) {
            let date = sameWeekLog.shift();
            sameWeekLog.forEach(log => {
                let formatedDate = formattedDate(parseDateString(log.name));
                log.name = formattedDateDay(parseDateString(log.name));
                log.date = formatedDate;
            });
            date = getWeekISO(date)
            groupedLog.push({
                'name': 'Année ' + date.year + '\nsemaine ' + date.week,
                'children': sameWeekLog
            });
        }
        let newGroupedLog = [];
        groupedLog.forEach(week => {
            if (week.children.length > 1) {
                sameWeekLog.forEach(log => {
                    log.name = log.date;
                });
                newGroupedLog.push({
                    'name': week.name,
                    'children': groupByDay(week)
                });
            } else {
                newGroupedLog.push(week);
            }
        });
        return newGroupedLog;
    }


    /**
     * Groupe les logs par mois en regroupant ceux qui sont du même mois.
     * @param {Object} level - Le niveau contenant les logs à regrouper.
     * @returns {Array} - Les logs groupés par mois.
     */
    function groupByMonth(level) {
        let groupedLog = [];
        let currentDay = parseDateString(level.children[0]['name']);
        let sameMonthLog = [];
        sameMonthLog.push(currentDay);
        level.children.forEach(log => {
            let formatedDate = formattedDate(parseDateString(log.name));
            if (isSameMonth(currentDay, parseDateString(log.name))) {
                sameMonthLog.push(log);
            } else {
                currentDay = parseDateString(log.name);
                const date = sameMonthLog.shift();
                sameMonthLog.forEach(log => {
                    log.name = formattedDateMonth(parseDateString(log.name));
                    log.date = formatedDate;
                });
                groupedLog.push({
                    'name': formattedDateMonth(date),
                    'children': sameMonthLog
                });
                sameMonthLog = [];
                sameMonthLog.push(currentDay);
                sameMonthLog.push(log);
            }
        });
        if (sameMonthLog.length !== 0) {
            const date = sameMonthLog.shift();
            sameMonthLog.forEach(log => {
                let formatedDate = formattedDate(parseDateString(log.name));
                log.name = formattedDateMonth(parseDateString(log.name));
                log.date = formatedDate;
            });
            groupedLog.push({
                'name': formattedDateMonth(date),
                'children': sameMonthLog
            });
        }
        let newGroupedLog = [];
        groupedLog.forEach(month => {
            if (month.children.length > 1) {
                sameMonthLog.forEach(log => {
                    log.name = log.date;
                });
                newGroupedLog.push({
                    'name': month.name,
                    'children': groupByWeek(month)
                });
            } else {
                newGroupedLog.push(month);
            }
        });
        return newGroupedLog;
    }


    /**
     * Groupe les logs par année en regroupant ceux qui sont de la même année.
     * @param {Object} level - Le niveau contenant les logs à regrouper.
     * @returns {Array} - Les logs groupés par année.
     */
    function groupByYear(level) {
        let groupedLog = [];
        let currentDay = parseDateString(level.children[0]['name']);
        let sameYearLog = [];
        sameYearLog.push(currentDay);
        level.children.forEach(log => {
            let formatedDate = formattedDate(parseDateString(log.name));
            if (isSameYear(currentDay, parseDateString(log.name))) {
                sameYearLog.push(log);
            } else {
                currentDay = parseDateString(log.name);
                const date = sameYearLog.shift();
                sameYearLog.forEach(log => {
                    log.name = formattedDateYear(parseDateString(log.name));
                    log.date = formatedDate;
                });
                groupedLog.push({
                    'name': formattedDateYear(date),
                    'children': sameYearLog
                });
                sameYearLog = [];
                sameYearLog.push(currentDay);
                sameYearLog.push(log);
            }
        });
        if (sameYearLog.length !== 0) {
            const date = sameYearLog.shift();
            sameYearLog.forEach(log => {
                let formatedDate = formattedDate(parseDateString(log.name));
                log.name = formattedDateYear(parseDateString(log.name));
                log.date = formatedDate;
            });
            groupedLog.push({
                'name': formattedDateYear(date),
                'children': sameYearLog
            });
        }
        let newGroupedLog = [];
        groupedLog.forEach(year => {
            if (year.children.length > 1) {
                sameYearLog.forEach(log => {
                    log.name = log.date;
                });
                newGroupedLog.push({
                    'name': year.name,
                    'children': groupByWeek(year)
                });
            } else {
                newGroupedLog.push(year);
            }
        });
        return newGroupedLog;
    }


    /**
     * Vérifie si deux dates se trouvent le même jour.
     * @param {Date} date1 - La première date.
     * @param {Date} date2 - La deuxième date.
     * @returns {boolean} - Vrai si les dates sont le même jour, faux sinon.
     */
    function isSameDay(date1, date2) {
        return date1.getFullYear() === date2.getFullYear()
            && date1.getMonth() === date2.getMonth()
            && date1.getDate() === date2.getDate();
    }


    /**
     * Vérifie si deux dates se trouvent la même semaine.
     * @param {Date} date1 - La première date.
     * @param {Date} date2 - La deuxième date.
     * @returns {boolean} - Vrai si les dates sont la même semaine, faux sinon.
     */
    function isSameWeek(date1, date2) {
        const week1 = getWeekISO(date1);
        const week2 = getWeekISO(date2);
        return week1.week === week2.week && week1.year === week2.year;
    }


    /**
     * Calcule le numéro de semaine ISO et l'année correspondante pour une date donnée.
     * @param {Date} date - La date à convertir.
     * @returns {Object} - Un objet contenant l'année et le numéro de semaine ISO.
     */
    function getWeekISO(date) {
        const target = new Date(date.valueOf());
        const dayNr = (date.getUTCDay() + 6) % 7;
        target.setUTCDate(target.getUTCDate() - dayNr + 3);
        const firstThursday = target.valueOf();
        target.setUTCMonth(0, 1);
        if (target.getUTCDay() !== 4) {
            target.setUTCMonth(0, 1 + ((4 - target.getUTCDay()) + 7) % 7);
        }
        const weekNumber = 1 + Math.ceil((firstThursday - target) / 604800000);
        return {week: weekNumber, year: target.getUTCFullYear()};
    }


    /**
     * Vérifie si deux dates se trouvent le même mois.
     * @param {Date} date1 - La première date.
     * @param {Date} date2 - La deuxième date.
     * @returns {boolean} - Vrai si les dates sont le même mois, faux sinon.
     */
    function isSameMonth(date1, date2) {
        return date1.getFullYear() === date2.getFullYear()
            && date1.getMonth() === date2.getMonth();
    }


    /**
     * Vérifie si deux dates se trouvent la même année.
     * @param {Date} date1 - La première date.
     * @param {Date} date2 - La deuxième date.
     * @returns {boolean} - Vrai si les dates sont la même année, faux sinon.
     */
    function isSameYear(date1, date2) {
        return date1.getFullYear() === date2.getFullYear();
    }


    /**
     * Calcule la durée en jours entre les dates des logs.
     * @param {Array} logs - Les logs contenant les dates à comparer.
     * @returns {number} - Le nombre de jours entre les dates des logs.
     */
    function getEtenduLog(logs) {
        let minDate = logs[0];
        let maxDate = logs[0];
        logs.forEach(log => {
            if (parseDateString(log.name) < parseDateString(minDate.name)) {
                minDate = log;
            }
            if (parseDateString(log.name) > parseDateString(maxDate.name)) {
                maxDate = log;
            }
        });
        const timeDifference = Math.abs(parseDateString(minDate.name) - parseDateString(maxDate.name));
        return Math.ceil(timeDifference / (1000 * 60 * 60 * 24));
    }


    /**
     * Calcule la durée en jours entre deux dates.
     * @param {Date} minDate - La date de début.
     * @param {Date} maxDate - La date de fin.
     * @returns {number} - Le nombre de jours entre les deux dates.
     */
    function getNbDayBetween(minDate, maxDate) {
        const timeDifference = Math.abs(minDate - maxDate);
        return Math.ceil(timeDifference / (1000 * 60 * 60 * 24));
    }


    /**
     * Analyse une chaîne de caractères représentant une date et retourne un objet Date.
     * @param {string} dateString - La chaîne de caractères à analyser.
     * @returns {Date} - L'objet Date résultant de l'analyse.
     */
    function parseDateString(dateString) {
        let formattedString = dateString.replace(' ', 'T');
        return new Date(formattedString);
    }


    /**
     * Formate une date pour afficher uniquement l'année.
     * @param {Date} date - La date à formater.
     * @returns {string} - La date formatée avec l'année.
     */
    function formattedDateYear(date) {
        const year = date.getFullYear();
        return `${year}`;
    }


    /**
     * Formate une date pour afficher l'année et le mois.
     * @param {Date} date - La date à formater.
     * @returns {string} - La date formatée avec l'année et le mois.
     */
    function formattedDateMonth(date) {
        const year = date.getFullYear();
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        return `${year}-${month}`;
    }


    /**
     * Formate une date pour afficher l'année, le mois et le jour.
     * @param {Date} date - La date à formater.
     * @returns {string} - La date formatée avec l'année, le mois et le jour.
     */
    function formattedDateDay(date) {
        const year = date.getFullYear();
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const day = date.getDate().toString().padStart(2, '0');
        return `${year}-${month}-${day}`;
    }


    /**
     * Formate une date pour afficher l'heure, les minutes et les secondes.
     * @param {Date} date - La date à formater.
     * @returns {string} - La date formatée avec l'heure, les minutes et les secondes.
     */
    function formattedDateHours(date) {
        const hours = date.getHours().toString().padStart(2, '0');
        const minutes = date.getMinutes().toString().padStart(2, '0');
        const seconds = date.getSeconds().toString().padStart(2, '0');
        return `${hours}:${minutes}:${seconds}`;
    }


    /**
     * Formate une date pour afficher l'année, le mois, le jour, l'heure, les minutes et les secondes.
     * @param {Date} date - La date à formater.
     * @returns {string} - La date formatée avec l'année, le mois, le jour, l'heure, les minutes et les secondes.
     */
    function formattedDate(date) {
        const year = date.getFullYear();
        const month = (date.getMonth() + 1).toString().padStart(2, '0');
        const day = date.getDate().toString().padStart(2, '0');
        const hours = date.getHours().toString().padStart(2, '0');
        const minutes = date.getMinutes().toString().padStart(2, '0');
        const seconds = date.getSeconds().toString().padStart(2, '0');
        return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
    }


    /**
     * Ajoute un diagramme de circle packing pour visualiser la hiérarchie des outils, langues, niveaux et logs.
     * @returns {SVGElement} - Le SVG créé pour le diagramme de circle packing.
     */
    function addCirclePacking() {
        const width = 928;
        const height = 600;

        const color = d3.scaleLinear()
            .domain([0, 5])
            .range(["hsl(0,0%,100%)", "hsl(228,30%,40%)"])
            .interpolate(d3.interpolateHcl);

        const pack = data => d3.pack()
            .size([width, height])
            .padding(3)
            (d3.hierarchy(data)
                .sum(d => d.value)
                .sort((a, b) => b.value - a.value));
        const root = pack(data_circlepacking);

        const svg = d3.create("svg")
            .attr("viewBox", `0 0 ${width} ${height}`)
            .attr("width", "100%")
            .attr("style", "max-width: 100%; height: auto; display: block; margin: 0 auto; background: #0e1022; cursor: pointer;");

        const g = svg.append("g")
            .attr("transform", `translate(${width / 2},${height / 2})`);

        const node = g.selectAll("circle")
            .data(root.descendants().slice(1))
            .join("circle")
            .attr("fill", d => d.children ? color(d.depth) : "white")
            .attr("pointer-events", d => !d.children ? "none" : null)
            .on("mouseover", function () {
                d3.select(this).attr("stroke", "#000");
            })
            .on("mouseout", function () {
                d3.select(this).attr("stroke", null);
            })
            .on("click", (event, d) => focus !== d && (zoom(event, d), event.stopPropagation()));

        const label = g.selectAll("text")
            .data(root.descendants())
            .join("g")
            .attr("class", "label-group")
            .style("fill-opacity", d => d.parent === root ? 1 : 0)
            .style("display", d => d.parent === root ? "inline" : "none")
            .attr("transform", d => `translate(${d.x},${d.y})`);

        label.append("rect")
            .attr("class", "label-background")
            .attr("x", d => -((Math.max(...d.data.name.split('\n').map(line => line.length * 8)) / 2)))
            .attr("y", d => d.data.name.includes('\n') ? -10 - ((d.data.name.split('\n').length - 1) * 10) : -10)
            .attr("width", d => Math.max(...d.data.name.split('\n').map(line => line.length * 8)))
            .attr("height", d => d.data.name.includes('\n') ? 20 + ((d.data.name.split('\n').length - 1) * 20) : 20)
            .style("fill", "white")
            .style("opacity", 1);

        label.selectAll("text")
            .data(d => {
                if (d.data.name.includes('\n')) {
                    return d.data.name.split('\n').map((line, i, arr) => ({line, i, total: arr.length}));
                } else {
                    return [{line: d.data.name, i: 0, total: 1}];
                }
            })
            .join("text")
            .attr("x", 0)
            .attr("dy", d => d.total === 1 ? "0.35em" : `${(d.i - (d.total / 2 - 0.5)) * 1.2}em`)
            .style("font", "14px sans-serif")
            .style("font-weight", "bold")
            .attr("text-anchor", "middle")
            .text(d => d.line);

        svg.on("click", (event) => zoom(event, root));

        let focus = root;
        let view;

        zoomTo([root.x, root.y, root.r * 2]);


        /**
         * Effectue un zoom sur le diagramme de circle packing en ajustant les coordonnées des nœuds et des étiquettes.
         * @param {Array} v - Les coordonnées de vue pour effectuer le zoom [x, y, r].
         */
        function zoomTo(v) {
            const k = Math.min(width, height) / v[2];
            view = v;
            label.attr("transform", d => `translate(${(d.x - v[0]) * k},${(d.y - v[1]) * k})`);
            node.attr("transform", d => `translate(${(d.x - v[0]) * k},${(d.y - v[1]) * k})`);
            node.attr("r", d => d.r * k);
        }


        /**
         * Gère le zoom sur un nœud spécifique du diagramme de circle packing.
         * @param {Event} event - L'événement de clic déclenchant le zoom.
         * @param {Object} d - Le nœud de la hiérarchie sur lequel l'utilisateur a cliqué pour zoomer.
         */
        function zoom(event, d) {
            focus = d;

            const transition = svg.transition()
                .duration(event.altKey ? 7500 : 750)
                .tween("zoom", () => {
                    const i = d3.interpolateZoom(view, [focus.x, focus.y, focus.r * 2]);
                    return t => zoomTo(i(t));
                });

            label
                .filter(function (d) {
                    return d.parent === focus || this.style.display === "inline";
                })
                .transition(transition)
                .style("fill-opacity", d => d.parent === focus ? 1 : 0)
                .on("start", function (d) {
                    if (d.parent === focus) this.style.display = "inline";
                })
                .on("end", function (d) {
                    if (d.parent !== focus) this.style.display = "none";
                });
        }

        return svg.node();
    }

    async function renderCirclePacking() {
        await transformData(tools_circlepacking, languages_circlepacking, levels_circlepacking, logs_circlepacking);
        document.getElementById("circlepacking").append(addCirclePacking());
    }

    renderCirclePacking();
</script>