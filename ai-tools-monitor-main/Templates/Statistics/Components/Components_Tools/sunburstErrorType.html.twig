<div id="sunburst" class="text-center"></div>

<script>
    let data_sunburst = {{ data|json_encode|raw }};

    function transformData(data) {
        const root = {
            name: "Erreurs",
            children: [
                {
                    name: "API OnlineFormaPro",
                    children: [
                        { name: 'Erreur lors de la requête', value: 0 },
                        { name: 'Réponse vide', value: 0 },
                        { name: 'Format de réponse invalide', value: 0 }
                    ]
                },
                {
                    name: "API OpenIA",
                    children: [
                        { name: 'Erreur lors de la requête', value: 0 },
                        { name: 'Erreur dans la réponse', value: 0 }
                    ]
                },
                { name: 'Erreur d\'exécution du script', value: 0 }
            ]
        };

        data.forEach(log => {
            switch (log.id_error_type) {
                case 1:
                    root.children[0].children[0].value++;
                    break;
                case 2:
                    root.children[0].children[1].value++;
                    break;
                case 3:
                    root.children[0].children[2].value++;
                    break;
                case 4:
                    root.children[1].children[0].value++;
                    break;
                case 5:
                    root.children[1].children[1].value++;
                    break;
                default:
                    root.children[2].value++;
            }
        });

        return root;
    }

    const newDataSunBurst = transformData(data_sunburst);
    data_sunburst = newDataSunBurst;

    function addSunBurst() {
        let data = data_sunburst;
        function autoBox() {
            document.body.appendChild(this);
            const {x, y, width, height} = this.getBBox();
            document.body.removeChild(this);
            return [x, y, width, height];
        }

        const color = d3.scaleOrdinal(d3.quantize(d3.interpolateRainbow, data.children.length + 1));
        const radius = 928 / 2;

        const partition = data => d3.partition()
            .size([2 * Math.PI, radius])
            (d3.hierarchy(data)
                .sum(d => d.value)
                .sort((a, b) => b.value - a.value));

        const arc = d3.arc()
            .startAngle(d => d.x0)
            .endAngle(d => d.x1)
            .padAngle(d => Math.min((d.x1 - d.x0) / 2, 0.005))
            .padRadius(radius / 2)
            .innerRadius(d => d.y0)
            .outerRadius(d => d.y1 - 1);

        const root = partition(data);

        const svg = d3.create("svg")
            .attr("height", 600);

        const format = d3.format(",d");
        svg.append("g")
            .attr("fill-opacity", 0.6)
            .selectAll("path")
            .data(root.descendants().filter(d => d.depth))
            .join("path")
            .attr("fill", d => { while (d.depth > 1) d = d.parent; return color(d.data.name); })
            .attr("d", arc)
            .append("title")
            .text(d => `${d.ancestors().map(d => d.data.name).reverse().join("/")}\n${format(d.value)} erreur(s)`);

        svg.append("g")
            .attr("pointer-events", "none")
            .attr("text-anchor", "middle")
            .attr("font-size", 10)
            .attr("font-family", "sans-serif")
            .selectAll("text")
            .data(root.descendants().filter(d => d.depth && (d.y0 + d.y1) / 2 * (d.x1 - d.x0) > 10))
            .join("text")
            .attr("transform", function(d) {
                const x = (d.x0 + d.x1) / 2 * 180 / Math.PI;
                const y = (d.y0 + d.y1) / 2;
                return `rotate(${x - 90}) translate(${y},0) rotate(${x < 180 ? 0 : 180})`;
            })
            .attr("dy", "0.35em")
            .text(d => d.data.name);

        return svg.attr("viewBox", autoBox).node();
    }

    document.getElementById("sunburst").append(addSunBurst());
</script>