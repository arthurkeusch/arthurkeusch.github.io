<ul class="list-group list-group-horizontal mx-auto">
    <li class="list-group-item" style="cursor: pointer;">
        <input class="form-check-input me-1" type="radio"
               value="" id="all_points"
               onclick="showBoxPlotGroupByHoursPointsAssistants(1)" style="cursor: pointer;">
        <label class="form-check-label" for="all_points"
               style="cursor: pointer; user-select: none;">
            Tous les points
        </label>
    </li>
    <li class="list-group-item" style="cursor: pointer;">
        <input class="form-check-input me-1" type="radio"
               value="" id="outliers_points" checked
               onclick="showBoxPlotGroupByHoursPointsAssistants(2)" style="cursor: pointer;">
        <label class="form-check-label" for="outliers_points"
               style="cursor: pointer; user-select: none;">
            Uniquement les valeurs aberrantes
        </label>
    </li>
    <li class="list-group-item" style="cursor: pointer;">
        <input class="form-check-input me-1" type="radio"
               value="" id="no_points"
               onclick="showBoxPlotGroupByHoursPointsAssistants(3)" style="cursor: pointer;">
        <label class="form-check-label" for="no_points"
               style="cursor: pointer; user-select: none;">
            Ne rien afficher
        </label>
    </li>
</ul>
<br>

<div id="boxplotGroupByHours_assistants" style="height: 100%; width: 100%;"></div>

<script>
    let data = {{ data|json_encode|raw }};
    let domain = [];
    const orderedDomains = ["0h - 3h", "4h - 7h", "8h - 11h", "12h - 15h", "16h - 19h", "20h - 23h"];


    /**
     * Convertit les données en les regroupant par tranches horaires.
     */
    function convertData() {
        domain = [];


        /**
         * Retourne la plage horaire correspondant à l'heure donnée et l'ajoute au domaine.
         * @param {number} hours - L'heure à convertir.
         * @returns {string} - La plage horaire correspondante.
         */
        function getHours(hours) {
            if (hours >= 0 && hours <= 3) {
                domain.push("0h - 3h");
                return "0h - 3h";
            } else if (hours >= 4 && hours <= 7) {
                domain.push("4h - 7h");
                return "4h - 7h";
            } else if (hours >= 8 && hours <= 11) {
                domain.push("8h - 11h");
                return "8h - 11h";
            } else if (hours >= 12 && hours <= 15) {
                domain.push("12h - 15h");
                return "12h - 15h";
            } else if (hours >= 16 && hours <= 19) {
                domain.push("16h - 19h");
                return "16h - 19h";
            } else {
                domain.push("20h - 23h");
                return "20h - 23h";
            }
        }


        /**
         * Retourne un tableau de plages horaires uniques.
         * @param {Array} timeRanges - Les plages horaires à filtrer.
         * @returns {Array} - Les plages horaires uniques.
         */
        function getUniqueTimeRanges(timeRanges) {
            const uniqueTimeRanges = [];
            const seen = new Set();
            for (const range of timeRanges) {
                if (!seen.has(range)) {
                    uniqueTimeRanges.push(range);
                    seen.add(range);
                }
            }
            return uniqueTimeRanges;
        }

        let newData = [];
        data.forEach(thread => {
            newData.push({
                'hours': getHours(parseInt(new Date(thread.date_thread.replace(' ', 'T')).getHours().toString().padStart(2, '0'))),
                'latency': thread.latency_thread,
                'id_log': thread.id_thread
            });
        });
        domain = getUniqueTimeRanges(domain).sort((a, b) => orderedDomains.indexOf(a) - orderedDomains.indexOf(b));
        data = newData;
    }

    convertData();


    /**
     * Ajoute un diagramme en boîte groupé par heures pour les assistants avec les points de données spécifiques.
     */
    async function showBoxPlotGroupByHoursPointsAssistants(number) {
        const svgNode = await add_boxplotGroupByHours_assistants(number);
        const boxplotDiv = document.getElementById("boxplotGroupByHours_assistants");
        boxplotDiv.innerHTML = '';
        boxplotDiv.appendChild(svgNode);
        document.getElementById("all_points").checked = (number === 1);
        document.getElementById("outliers_points").checked = (number === 2);
        document.getElementById("no_points").checked = (number === 3);
    }


    /**
     * Crée et retourne le SVG pour le diagramme en boîte groupé par heures avec les styles de points spécifiés.
     */
    function add_boxplotGroupByHours_assistants(stylePointe) {
        const width = 928;
        const height = 600;
        const marginTop = 20;
        const marginRight = 20;
        const marginBottom = 30;
        const marginLeft = 40;

        const bins = d3.bin()
            .thresholds(domain.length)
            .value(d => domain.indexOf(d.hours))(data)
            .map(bin => {
                bin.sort((a, b) => a.latency - b.latency);
                const values = bin.map(d => d.latency);
                const min = values[0];
                const max = values[values.length - 1];
                const q1 = d3.quantile(values, 0.25);
                const q2 = d3.quantile(values, 0.50);
                const q3 = d3.quantile(values, 0.75);
                const iqr = q3 - q1;
                const r0 = Math.max(min, q1 - iqr * 1.5);
                const r1 = Math.min(max, q3 + iqr * 1.5);
                bin.quartiles = [q1, q2, q3];
                bin.range = [r0, r1];
                bin.outliers = bin.filter(v => v.latency < r0 || v.latency > r1);
                bin.allPoints = bin;
                return bin;
            });

        const x = d3.scaleBand()
            .domain(domain)
            .range([marginLeft, width - marginRight])
            .paddingInner(0.1)
            .paddingOuter(0.5);

        const y = d3.scaleLinear()
            .domain([0, d3.max(data, d => d.latency)]).nice()
            .range([height - marginBottom, marginTop]);

        const svg = d3.create("svg")
            .attr("width", width)
            .attr("height", height)
            .attr("viewBox", [0, 0, width, height])
            .attr("style", "max-width: 100%; height: auto; font: 10px sans-serif;")
            .attr("text-anchor", "middle");

        svg.append("text")
            .attr("text-anchor", "start")
            .attr("x", marginLeft - 5)
            .attr("y", marginTop - 8)
            .attr("font-size", "12px")
            .text("Temps de réponse (ms)");

        const g = svg.append("g")
            .selectAll("g")
            .data(bins)
            .join("g")
            .attr("transform", d => {
                const tx = x(domain[d.x0]);
                return tx !== undefined ? `translate(${tx + x.bandwidth() / 2},0)` : "";
            });

        g.append("path")
            .attr("stroke", "currentColor")
            .attr("d", d => {
                const y1 = y(d.range[1]) || 0;
                const y0 = y(d.range[0]) || 0;
                return `M0,${y1}V${y0}`;
            });

        g.append("rect")
            .attr("x", -x.bandwidth() / 2)
            .attr("y", d => y(d.quartiles[2]) || 0)
            .attr("width", x.bandwidth())
            .attr("height", d => (y(d.quartiles[0]) || 0) - (y(d.quartiles[2]) || 0))
            .attr("fill", "#ddd");

        g.append("line")
            .attr("x1", -x.bandwidth() / 2)
            .attr("x2", x.bandwidth() / 2)
            .attr("y1", d => y(d.quartiles[1]) || 0)
            .attr("y2", d => y(d.quartiles[1]) || 0)
            .attr("stroke", "currentColor")
            .attr("stroke-width", 2);

        function addPoints(points, g, allData) {
            const circles = g.append("g")
                .attr("fill", "#00bc00")
                .attr("fill-opacity", 0.8)
                .attr("stroke", "none")
                .selectAll("circle")
                .data(points)
                .enter()
                .append("circle")
                .attr("r", 2)
                .attr("cx", () => (Math.random() - 0.5) * x.bandwidth() * 0.4)
                .attr("cy", d => y(d.latency))
                .style("cursor", "pointer")
                .on("mouseover", function () {
                    d3.select(this).attr("r", 4).attr("fill-opacity", 1);
                })
                .on("mouseout", function () {
                    d3.select(this).attr("r", 2).attr("fill-opacity", 0.8);
                })
                .on("click", function (event, d) {
                    goToAssistant(d.id_log)
                });
        }

        g.each(function(d) {
            if (stylePointe === 1) {
                addPoints(d.allPoints, d3.select(this), data);
            } else if (stylePointe === 2) {
                addPoints(d.outliers, d3.select(this), data);
            }
        });

        svg.append("g")
            .attr("transform", `translate(0,${height - marginBottom})`)
            .call(d3.axisBottom(x).tickSizeOuter(0));

        svg.append("g")
            .attr("transform", `translate(${marginLeft},0)`)
            .call(d3.axisLeft(y).ticks(null, "s"))
            .call(g => g.select(".domain").remove());

        return svg.node();
    }

    document.getElementById("boxplotGroupByHours_assistants").appendChild(add_boxplotGroupByHours_assistants(2));
</script>