{% include 'Components/headers.html.twig' %}
<script src="https://d3js.org/d3.v7.min.js"></script>

<div class="modal modal-sheet position-fixed align-items-center justify-content-center"
     style="background: transparent; padding: 50px; top: 0; bottom: 0; left: 0; right: 0; max-width: calc(100% - 50px); margin: auto; border-radius: 20px;"
     role="dialog" id="modalLog">
    <div class="modal-dialog modal-fullscreen p-0 m-0 h-100" role="document">
        <div class="modal-content rounded-4 shadow h-100" style="margin: auto;">
            <div class="modal-header p-5 pb-4 border-bottom-0" style="margin: auto; max-width: calc(100% - 100px);">
                <h1 id="logTitle" class="fw-bold mb-0 fs-2">
                    Chargement des données...
                </h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal"
                        aria-label="Close" onclick="hideLog()"
                        style="position: absolute; right: 100px;">
                </button>
            </div>
            <div id="logContent" class="modal-body p-5 pt-0 overflow-auto"
                 style="height: calc(100% - 100px); margin: auto; max-width: calc(100% - 100px);">
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="content" style="margin-top: 10px; margin-bottom: 10px;">
    <div class="card shadow-sm" style="margin-left: 10px; margin-right: 10px;">
        <div class="card-body">

            <h1>Statistiques des outils</h1>

            <div class="row row-cols-1 row-cols-xl-2 p-3 g-3">
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <h3 class="text-center">
                            Evolution du temps de réponse en fonction de l'heure
                        </h3>
                        <div class="input-group input-group-sm mb-3">
                            <label class="input-group-text" for="log_scatter_plot" style="margin-left: 50px;">
                                Nombre de log à afficher<br>
                                (maximum {{ nbLogsMax }})
                            </label>
                            <input onkeypress="handleKeyPress(event)" type="number"
                                   class="form-control" id="log_scatter_plot"
                                   value="500" min="0" max="{{ nbLogsMax|json_encode|raw }}"
                                   style="margin-right: 50px;">
                        </div>
                        <ul class="list-group list-group-horizontal mx-auto">
                            {% for model in model_scatterplot %}
                                <li class="list-group-item" style="cursor: pointer;">
                                    <input class="form-check-input me-1" type="checkbox"
                                           value="" id="model_scatterplot_{{ model.model }}" checked
                                           onclick="filterScatterPlotData()" style="cursor: pointer;">
                                    <label class="form-check-label" for="model_scatterplot_{{ model.model }}"
                                           style="cursor: pointer; user-select: none;">
                                        {{ model.model }}
                                    </label>
                                </li>
                            {% endfor %}
                        </ul>
                        {% if data_scatterplot is not empty %}
                            {% include 'Statistics/Components/scatterplot.html.twig' with {
                                'data': data_scatterplot,
                                'model': model_scatterplot,
                                'y_name': "Temps de réponse (ms)",
                                'x_name': "Heure de la journée (hh:mm)",
                                'to': '/tool/language/log/'
                            } %}
                        {% else %}
                            {% include 'Statistics/Components/nodata.html.twig' with {
                                'message': "Des données sont manquantes veuillez ajouter plus de log
                                        afin que ce graphique puisse s'afficher correctement."
                            } %}
                        {% endif %}
                    </div>
                </div>

                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <h3 class="text-center">Evolution du temps de réponse (médiane)</h3>
                        {% if data_linechart is not empty %}
                            <div style="margin-left: 50px; margin-right: 50px; margin-bottom: 30px;">
                                <select onchange="filterLineChart()" class="form-select" id="tools_line_chart">
                                    <option value="all">Tous les outils</option>
                                    {% for tool in tools_linechart %}
                                        <option value="{{ tool.id_tool }}">{{ tool.name_tool }}</option>
                                    {% endfor %}
                                </select>
                            </div>
                            {% include 'Statistics/Components/linechart.html.twig' with {
                                'data': data_linechart,
                                'y_name': "Temps de réponse (ms)"
                            } %}
                        {% else %}
                            {% include 'Components/nodata.html.twig' with {
                                'message': "Des données sont manquantes veuillez ajouter plus de log
                                        afin que ce graphique puisse s'afficher correctement."
                            } %}
                        {% endif %}
                    </div>
                </div>

                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <h3 class="text-center">Répartition des temps de réponses en fonction des outils</h3>
                        {% if data_boxplot is not empty %}
                            <div class="input-group mb-3 justify-content-center">
                                <label for="start" class="input-group-text" style="margin-left: 50px;">Du</label>
                                <input style="cursor: pointer;" id="start" type="datetime-local" class="form-control">
                                <label for="end" class="input-group-text">au</label>
                                <input style="cursor: pointer; margin-right: 50px;" id="end" type="datetime-local"
                                       class="form-control">
                            </div>
                            <div class="d-flex justify-content-center align-items-center">
                                <div class="d-flex align-items-center">
                                    <input
                                            id="show_error_boxplot"
                                            class="form-check-input"
                                            type="checkbox"
                                            style="cursor: pointer;"
                                            checked
                                    >
                                    <label class="ms-2" for="show_error_boxplot" style="cursor: pointer;">
                                        Afficher les logs d'erreur
                                    </label>
                                </div>
                                <button
                                        type="submit"
                                        class="btn btn-outline-dark ms-3"
                                        onclick="filterBoxPlot()"
                                >
                                    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor"
                                         class="bi bi-search" viewBox="0 0 16 16">
                                        <path d="M11.742 10.344a6.5 6.5 0 1 0-1.397 1.398h-.001q.044.06.098.115l3.85 3.85a1 1 0 0 0 1.415-1.414l-3.85-3.85a1 1 0 0 0-.115-.1zM12 6.5a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0"/>
                                    </svg>
                                </button>
                            </div>
                            <br>
                            {% include 'Statistics/Components/boxplot.html.twig' with {
                                'data': data_boxplot,
                                'tools': tools_boxplot
                            } %}
                        {% else %}
                            {% include 'Components/nodata.html.twig' with {
                                'message': "Des données sont manquantes veuillez ajouter plus de log
                                        afin que ce graphique puisse s'afficher correctement."
                            } %}
                        {% endif %}
                    </div>
                </div>

                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <h3 class="text-center">Temps de réponse moyen en fonction des niveaux</h3>
                        {% if data_groupedbarchart is not empty %}
                            {% include 'Statistics/Components/groupedbarchart.html.twig' with {
                                'data': data_groupedbarchart
                            } %}
                        {% else %}
                            {% include 'Components/nodata.html.twig' with {
                                'message': "Des données sont manquantes veuillez ajouter plus de log
                                        afin que ce graphique puisse s'afficher correctement."
                            } %}
                        {% endif %}
                    </div>
                </div>

                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <h3 class="text-center">Répartition des types d'erreurs</h3>
                        {% if data_sunburst is not empty %}
                            {% include 'Statistics/Components/sunburstErrorType.html.twig' with {
                                'data': data_sunburst
                            } %}
                        {% else %}
                            {% include 'Components/nodata.html.twig' with {
                                'message': "Aucune erreur pour le moment."
                            } %}
                        {% endif %}
                    </div>
                </div>

                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <h3 class="text-center">Répartitions des types d'erreurs sur les outils, langues et niveaux</h3>
                        {% if data_sunburstTool is not empty %}
                            {% include 'Statistics/Components/sunburstErrorTool.html.twig' with {
                                'data': data_sunburstTool
                            } %}
                        {% else %}
                            {% include 'Components/nodata.html.twig' with {
                                'message': "Aucune erreur pour le moment."
                            } %}
                        {% endif %}
                    </div>
                </div>

                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <h3 class="text-center">Répartition des types d'erreurs en fonction des outils</h3>
                        {% if data_stackedbarchart is not empty %}
                            {% include 'Statistics/Components/stackedbarchart.html.twig' with {
                                'data': data_stackedbarchart,
                                'tools': tools_stackedbarchart
                            } %}
                        {% else %}
                            {% include 'Components/nodata.html.twig' with {
                                'message': "Aucune erreur pour le moment."
                            } %}
                        {% endif %}
                    </div>
                </div>

                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <h3 class="text-center">Hiérarchie des logs</h3>
                        {% if tools_circlepacking is not empty
                            and languages_circlepacking is not empty
                            and levels_tools_circlepacking is not empty
                            and logs_circlepacking is not empty %}
                            {% include 'Statistics/Components/circlepacking.html.twig' with {
                                'tools': tools_circlepacking,
                                'languages': languages_circlepacking,
                                'levels': levels_tools_circlepacking,
                                'logs': logs_circlepacking
                            } %}
                        {% else %}
                            {% include 'Components/nodata.html.twig' with {
                                'message': "Des données sont manquantes veuillez ajouter plus de log
                                        afin que ce graphique puisse s'afficher correctement."
                            } %}
                        {% endif %}
                    </div>
                </div>
            </div>


            <h1>Statistiques des assistants</h1>

            <div class="row row-cols-1 row-cols-xl-2 p-3 g-3">
                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <h3 class="text-center">
                            Evolution du temps de réponse en fonction de l'heure
                        </h3>
                        <p>
                            https://observablehq.com/@d3/box-plot/2?intent=fork
                        </p>
                    </div>
                </div>

                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <h3 class="text-center">
                            Evolution du temps de réponse (médiane)
                        </h3>
                        <p>
                            https://observablehq.com/@d3/line-chart/2?intent=fork
                        </p>
                    </div>
                </div>

                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <h3 class="text-center">
                            Répartition des types d'erreurs
                        </h3>
                        <p>
                            https://observablehq.com/@d3/pie-chart-update?intent=fork
                        </p>
                    </div>
                </div>

                <div class="col">
                    <div class="card h-100 shadow-sm">
                        <h3 class="text-center">
                            Evolution du temps de réponse en fonction des assistants
                        </h3>
                        <p>
                            https://observablehq.com/@d3/box-plot/2?intent=fork
                        </p>
                    </div>
                </div>
            </div>

        </div>


    </div>
</div>

<script>
    let dataScatterPlot = {{ data_scatterplot|json_encode|raw }};
    let modelScatterPlot = {{ model_scatterplot|json_encode|raw }};
    let nbLogMax = {{ nbLogsMax|json_encode|raw }};

    async function goTo(id) {
        showLog();
        await getRequest("/tool/language/log", {id: id})
            .then(response => {
                document.getElementById('logTitle').innerHTML = 'Information du log';
                document.getElementById('logContent').innerHTML = response;
            })
            .catch(error => {
                show_danger_message("La récupération des données a échoué : " + error);
            });
    }

    function showLog() {
        document.getElementById('modalLog').classList.add("d-flex");
    }

    function hideLog() {
        document.getElementById('modalLog').classList.remove("d-flex");
        document.getElementById('logContent').innerHTML = `
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>`;
    }

    function handleKeyPress(event) {
        if (event.key === 'Enter') {
            filterScatterPlotData();
        }
    }

    async function filterScatterPlotData() {
        let answer = null;
        let newModel = null;
        if (document.getElementById("log_scatter_plot").value > 10) {
            await getRequest("/statistics/scatterplot", {limit: document.getElementById("log_scatter_plot").value})
                .then(response => {
                    answer = JSON.parse(response);
                    dataScatterPlot = answer.data;
                    newModel = answer.model;

                    if (newModel.length !== modelScatterPlot.length) {
                        modelScatterPlot.forEach(oldModel => {
                            const modelElement = document.getElementById("model_scatterplot_" + oldModel.model);
                            const isModelPresent = newModel.some(newModel => newModel.model === oldModel.model);
                            if (isModelPresent) {
                                modelElement.parentNode.style.display = "";
                            } else {
                                modelElement.parentNode.style.display = "none";
                                modelElement.parentNode.removeChild(modelElement.parentNode.childNodes[0]);
                            }
                        });
                        modelScatterPlot = newModel;
                    }

                })
                .catch(error => {
                    show_danger_message("La récupération des données à échoué : " + error);
                });
        }
        let newData = modelScatterPlot;
        let nbNotCheck = 0;
        for (let model in modelScatterPlot) {
            if (!document.getElementById("model_scatterplot_" + modelScatterPlot[model].model).checked) {
                nbNotCheck++;
            }
        }
        if (nbNotCheck !== modelScatterPlot.length || answer !== null) {
            for (let model in modelScatterPlot) {
                for (let data in dataScatterPlot) {
                    if (document.getElementById("model_scatterplot_" + modelScatterPlot[model].model).checked
                        && modelScatterPlot[model].model === dataScatterPlot[data].model) {
                        newData.push(dataScatterPlot[data]);
                    }
                }
            }
        }
        setScatterPlot(newData);
    }

    async function filterBoxPlot() {
        let start = document.getElementById("start").value;
        let end = document.getElementById("end").value;
        let showError = document.getElementById("show_error_boxplot").checked;
        if (start === "") start = "null";
        if (end === "") end = "null";
        await getRequest("/statistics/boxplot", {
            start: start,
            end: end,
            showError: showError
        })
            .then(response => {
                data_boxplot = [];
                JSON.parse(response).data.forEach((log, index) => {
                    data_boxplot.push({id_tool: log.id_tool, latency: log.latency_log, id_log: log.id_log});
                });
                if (document.getElementById('all_points').checked) {
                    renderBoxPlot(1);
                } else if (document.getElementById('outliers_points').checked) {
                    renderBoxPlot(2);
                } else {
                    renderBoxPlot(3);
                }
            })
            .catch(error => {
                show_danger_message("La récupération des données a échoué : " + error);
            });
    }

    async function filterLineChart() {
        await getRequest("/statistics/linechart", {
            id_tool: document.getElementById("tools_line_chart").value
        })
            .then(async response => {
                data_line_chart = JSON.parse(response).data;
                document.getElementById("linechart").innerHTML = "";
                document.getElementById("linechart").appendChild(chart());
            })
            .catch(error => {
                show_danger_message("La récupération des données a échoué : " + error);
            });
    }
</script>